94. Binary Tree Inorder Traversal


Recursive Approach:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        self.ans = []
        self.Inorder(root)
        return self.ans
    # Resursive Approach
    def Inorder(self,root):
        if not root:
            return
        self.Inorder(root.left)
        self.ans.append(root.val)
        self.Inorder(root.right)
        
Iterative Approach:

In this approach each time traverse and read the value of a node we store it in stack and proceed forward until we reach None and as soon as we reach None we will return back popping out all the elements of stack
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        stack = []
        result = []
        
        while (root is not None) or (stack != []):
            while root is not None:
                stack.append(root)
                root = root.left
            root = stack.pop()
            result.append(root.val)
            root = root.right
        return result
