142. Linked List Cycle II

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        insPoint = None
        while True:
            if fast is None or fast.next is None:
                return None
            slow = slow.next
            fast = fast.next.next
            
            if (slow == fast):
                insPoint = slow
                break
        else:
            return None
        start = head
        while (start != insPoint):
            start = start.next
            insPoint = insPoint.next
                
        return insPoint
