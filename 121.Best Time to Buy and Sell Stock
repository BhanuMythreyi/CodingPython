121. Best Time to Buy and Sell Stock

My Approach: Correct but time limit exceeded so cannot be accepted technically
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        for buy in range(len(prices)-1):
            for sell in range(buy+1,len(prices)):
                profit = max(profit,prices[sell]-prices[buy])
        return profit
   
 Approach2:
 Profit variable is declared and then the array is traversed and the minimum is subtracted from the element being traversed and the obtained value is assigned to newprofit, if it is the maximum then the profit isupdated else the previous profit is returned
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        minimum = prices[0]
        for i in range(1,len(prices)):
            newProfit = prices[i] - minimum
            if newProfit > profit:
                profit = newProfit
            minimum = min(minimum,prices[i])
        return profit

 Solution: Optimized: Two pointer
 class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        left = 0
        right = 1
        maxProfit = 0
        while right<len(prices):
            if prices[left]<prices[right]:
                profit = prices[right]-prices[left]
                maxProfit = max(maxProfit,profit)
            else:
                left = right
            right += 1
        return maxProfit
