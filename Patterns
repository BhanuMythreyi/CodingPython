Patterns


Rows: Outer Loops
Columns: Inner Loops


Q1)

1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4

Code:

def Q1Patten(n):
  i = 1
  while (i<=n):
    j = 1
    while (j<=n):
      print(j,end = " ")
      j += 1
    print()
    i = i+1
Q1Patten(4)

                                                                (OR)
   
def Q1Patten(n):
  for i in range(1,n+1):
    for j in range(1,n+1):
      print(j,end=" ")
    print()
Q1Patten(4)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2)

4 3 2 1
4 3 2 1
4 3 2 1
4 3 2 1

def Q2Patten(n):
  i = 1
  while (i<=n):
    j = 1
    while (j<=n):
      print(n-j+1,end = " ")
      j += 1
    print()
    i = i+1
Q2Patten(4)
                                                                               (OR)

def Q2Patten(n):
  for i in range(1,n+1):
    for j in range(1,n+1):
      print(n-j+1,end=" ")
    print()
Q2Patten(4)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3) Solid Rectangle

* * * *
* * * *
* * * *
* * * *

def Q3Patten(n):
  for i in range(1,n+1):
    for j in range(1,n+1):
      print("*",end=" ")
    print()
Q3Patten(4)

Optimized:

def Q3Pattern(n):
  for i in range(1,n+1):
      print("* "*n)
Q3Pattern(4)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q4)

* * * * *
* *
* *
* * * * *

Identification: i == 1 or j == 1 or i == n or j == m

def Q4Pattern(n,m):
  
  for i in range(1,n+1):
    for j in range(1,m+1):
      if i == 1 or j == 1 or i == n or j == m:
        print("*",end = " ")
    print()

Q4Pattern(4,5)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q5) Hallow Rectangle

* * * * *
*       *
*       *
* * * * *

Identification: i == 1 or j == 1 or i == n or j == m


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q6) Right Triangle

*
* *
* * *
* * * *

Code:
def Q6Pattern(n):
  for i in range(1,n+1):
    for j in range(1,n+1):
      if j<=i:
        print("*",end = " ")
    print(" ")
Q6Pattern(4)

Optimized:

def Q6Pattern(n):
  for i in range(1,n+1):
      print("* "*i)
Q6Pattern(4)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q7)

* * * *
* * *
* *
*

def Q7Pattern(n):
  for i in range(1,n+1):
    for j in range(n,0,-1):
      if j>=i:
        print("*",end=" ")
    print(" ")
Q7Pattern(4)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q8) Flipped Half Pyramid

      *
    * *
  * * *
* * * *

Code:

def Q8Pattern(n):
  for i in range(1,n+1):
      print(" "*(n-i)+"*"*i)
Q8Pattern(4)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q9)

   *
  * *
 * * *
* * * *
Code differs a bit from the above code i.e. space to be added after "*" symbol

Code:

def Q9Pattern(n):
  for i in range(1,n+1):
      print(" "*(n-i)+"* "*i)
Q9Pattern(4)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q10) Inverted Triangle

def Q10Pattern(n):
  for i in range(n,0,-1):
    print(" "*(n-i)+"* "*i)
Q10Pattern(5)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q11) Diamond
 Triangle + Inverted Triangle
 
 
    *
   * * 
  * * * 
 * * * *
* * * * *
* * * * *
 * * * *
  * * *
   * *
    *

Code:
def Q11Pattern(n):
  for i in range(1,n+1):
      print(" "*(n-i)+"* "*i)
  for i in range(n,0,-1):
    print(" "*(n-i)+"* "*i)
Q11Pattern(5)






