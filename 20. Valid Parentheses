20. Valid Parentheses

Approach one:

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        closeToOpen = {")":"(","]":"[","}":"{"}
        
        for char in s:
            if char in closeToOpen:
                if stack and stack[-1] == closeToOpen[char]:
                    stack.pop()
                else:
                    return False
            else:
                stack.append(char)
        if not stack: # i.e. stack is empty
            return True
        else:
            return False

Approach Two:

from collections import deque
class Solution:
    def isValid(self, s: str) -> bool:
        stack = deque()
        for i in range(len(s)):
            if s[i] == "(" or s[i] == "{" or s[i] == "[":
                stack.append(s[i])
            else:
                if len(stack) == 0:
                    return False
                elif self.checkpair(stack[-1],s[i]):
                    stack.pop()
                    continue
                return False
        if len(stack) != 0:
            return False
        return True
    def checkpair(self,val1,val2):
        return ( (val1 == "(" and val2 == ")") or (val1 == "{" and val2 == "}") or (val1 == "[" and val2 == "]"))
