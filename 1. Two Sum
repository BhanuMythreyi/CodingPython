1. Two Sum


My Approach:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            val = nums[i]
            diff = target-val
            newarr = nums[i+1:]
            for j in range(len(newarr)):
                if diff == newarr[j]:
                    return [i,(len(nums[:i+1]))+j]
                    
                    
Optimized:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashMap = {}
        
        for i,n in enumerate(nums):
            diff = target-n
            if diff in hashMap:
                return [hashMap[diff],i]
            hashMap[n] = i
        return
# In the last line we dont have to return anything actually since it is provided that such pair exists for sure
