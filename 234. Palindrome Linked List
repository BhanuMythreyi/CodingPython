234. Palindrome Linked List

My Approach: (Appending the entire data into an array and solving) This approach took O(n) space too
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        cur = head
        arr = []
        while cur:
            arr.append(cur.val)
            cur = cur.next
        for i in range(len(arr)):
            if arr[i] != arr[len(arr)-1-i]:
                return False
        return True
        
        
 Optimal Apprach: Two pointers, when fast pointer reaches the end then slow pointer reaches the centre now since it is a singly linked list, we cannot move backwards and thus we reverse the LL from centre i.e. that's where our slow pointer is
 # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        fast = head
        slow = head
        
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            
        prev = None
        while slow:
            temp = slow.next
            slow.next = prev
            prev = slow
            slow = temp
        
        left,right = head,prev
        while right:
            if left.val != right.val:
                return False
            left = left.next
            right = right.next
        return True
