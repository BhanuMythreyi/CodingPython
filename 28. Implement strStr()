28. Implement strStr()

# Using Builtin Method find()

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        k = 0
        count = 0
        if len(needle) == 0:
            return 0
        if len(haystack)<len(needle):
            return -1
        if needle in haystack:
            return haystack.find(needle)
        else:
            return -1
            
# General Method: BruteForce Approach

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == "":
            return 0
        for i in range(len(haystack)+1-len(needle)):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1

# Optimized Approach: KMP Algorithm or String Matching Algorithm
To be implemented
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == "":
            return 0
        
        lps = [0]*len(needle)
        prevLps = 0
        i = 1
        while i<len(needle):
            if needle[i] == needle[prevLps]:
                lps[i] = prevLps+1
                prevLps += 1
                i += 1
            elif prevLps == 0:
                lps[i] = 0
                i += 1
            else:
                prevLps = lps[prevLps-1]
                
        i = 0
        j = 0
        while i<len(haystack):
            if haystack[i] == needle[j]:
                i += 1
                j += 1
            else:
                if j == 0:
                    i += 1
                else:
                    j = lps[j-1]
            if j == len(needle):
                return i-len(needle)
        return -1
