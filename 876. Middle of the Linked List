876. Middle of the Linked List

My Approach:
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        length = 0
        var = head
        while head.next is not None:
            length += 1
            head = head.next
        length += 1
        trav = length//2
        while trav != 0:
            var = var.next
            trav -= 1
        return Pointer
        
Two Pointer Approach (Another Approach):
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        
        while (fast != None and fast.next != None):
            slow = slow.next
            fast = fast.next.next
        return slow
