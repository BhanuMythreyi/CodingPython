169. Majority Element

BruteForce:
Use a sorting algo and then find the middle index since the maximum repeated element will be more than n/2 hence it must be at middle. But the Time Limit Exceeded even if we apply merge sort hence it is not preffered. The below show code may not be used as we used sort() function available in library

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        mid = (len(nums)-1)//2
        return nums[mid]
        
Another Approach:
hash map approach
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = {}
        result = 0
        maxCount = 0
        
        for n in nums:
            count[n] = 1+count.get(n,0)
            if count[n]>maxCount:
                result = n
            maxCount = max(count[n],maxCount)
        return result
        
        
The Best and Optimized Approach: better than inbuilt sort function
  class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        # Boyer-Moore algorithm
        result = 0
        maxCount = 0
        
        for n in nums:
            if maxCount == 0:
                result = n
            if n == result:
                maxCount += 1
            else:
                maxCount -= 1
        return result
